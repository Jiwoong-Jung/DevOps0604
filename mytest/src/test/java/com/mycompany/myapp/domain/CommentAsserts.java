package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllPropertiesEquals(Comment expected, Comment actual) {
        assertCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllUpdatablePropertiesEquals(Comment expected, Comment actual) {
        assertCommentUpdatableFieldsEquals(expected, actual);
        assertCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAutoGeneratedPropertiesEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableFieldsEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment relevant properties")
            .satisfies(e -> assertThat(e.getDepth()).as("check depth").isEqualTo(actual.getDepth()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getReadCnt()).as("check readCnt").isEqualTo(actual.getReadCnt()))
            .satisfies(e -> assertThat(e.getGoodCnt()).as("check goodCnt").isEqualTo(actual.getGoodCnt()))
            .satisfies(e -> assertThat(e.getBadCnt()).as("check badCnt").isEqualTo(actual.getBadCnt()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(
                e ->
                    assertThat(e.getModifiedAt())
                        .as("check modifiedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getModifiedAt())
            )
            .satisfies(e -> assertThat(e.getModifiedBy()).as("check modifiedBy").isEqualTo(actual.getModifiedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableRelationshipsEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment relationships")
            .satisfies(e -> assertThat(e.getPost()).as("check post").isEqualTo(actual.getPost()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()));
    }
}

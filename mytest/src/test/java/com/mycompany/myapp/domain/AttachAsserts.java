package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AttachAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttachAllPropertiesEquals(Attach expected, Attach actual) {
        assertAttachAutoGeneratedPropertiesEquals(expected, actual);
        assertAttachAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttachAllUpdatablePropertiesEquals(Attach expected, Attach actual) {
        assertAttachUpdatableFieldsEquals(expected, actual);
        assertAttachUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttachAutoGeneratedPropertiesEquals(Attach expected, Attach actual) {
        assertThat(expected)
            .as("Verify Attach auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttachUpdatableFieldsEquals(Attach expected, Attach actual) {
        assertThat(expected)
            .as("Verify Attach relevant properties")
            .satisfies(e -> assertThat(e.getOrd()).as("check ord").isEqualTo(actual.getOrd()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getOrigName()).as("check origName").isEqualTo(actual.getOrigName()))
            .satisfies(e -> assertThat(e.getExt()).as("check ext").isEqualTo(actual.getExt()))
            .satisfies(e -> assertThat(e.getContentType()).as("check contentType").isEqualTo(actual.getContentType()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getFileSize()).as("check fileSize").isEqualTo(actual.getFileSize()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(
                e ->
                    assertThat(e.getModifiedAt())
                        .as("check modifiedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getModifiedAt())
            )
            .satisfies(e -> assertThat(e.getModifiedBy()).as("check modifiedBy").isEqualTo(actual.getModifiedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttachUpdatableRelationshipsEquals(Attach expected, Attach actual) {
        assertThat(expected)
            .as("Verify Attach relationships")
            .satisfies(e -> assertThat(e.getAttachGroup()).as("check attachGroup").isEqualTo(actual.getAttachGroup()));
    }
}
